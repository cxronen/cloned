/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
/**
 * PlaybackReportingActivityApi - axios parameter creator
 * @export
 */
export const PlaybackReportingActivityApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [customQueryString] 
         * @param {boolean} [replaceUserId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customQuery: async (customQueryString?: string, replaceUserId?: boolean, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/user_usage_stats/submit_custom_query`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Emby-Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Emby-Authorization"] = localVarApiKeyValue;
            }

            if (customQueryString !== undefined) {
                localVarQueryParameter['customQueryString'] = customQueryString;
            }

            if (replaceUserId !== undefined) {
                localVarQueryParameter['replaceUserId'] = replaceUserId;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} breakdownType 
         * @param {number} [days] 
         * @param {string} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBreakdownReport: async (breakdownType: string, days?: number, endDate?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'breakdownType' is not null or undefined
            if (breakdownType === null || breakdownType === undefined) {
                throw new RequiredError('breakdownType','Required parameter breakdownType was null or undefined when calling getBreakdownReport.');
            }
            const localVarPath = `/user_usage_stats/{breakdownType}/BreakdownReport`
                .replace(`{${"breakdownType"}}`, encodeURIComponent(String(breakdownType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Emby-Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Emby-Authorization"] = localVarApiKeyValue;
            }

            if (days !== undefined) {
                localVarQueryParameter['days'] = days;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString() :
                    endDate;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [days] 
         * @param {string} [endDate] 
         * @param {string} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDurationHistogramReport: async (days?: number, endDate?: string, filter?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/user_usage_stats/DurationHistogramReport`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Emby-Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Emby-Authorization"] = localVarApiKeyValue;
            }

            if (days !== undefined) {
                localVarQueryParameter['days'] = days;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString() :
                    endDate;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [days] 
         * @param {string} [endDate] 
         * @param {string} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHourlyReport: async (days?: number, endDate?: string, filter?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/user_usage_stats/HourlyReport`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Emby-Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Emby-Authorization"] = localVarApiKeyValue;
            }

            if (days !== undefined) {
                localVarQueryParameter['days'] = days;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString() :
                    endDate;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJellyfinUsers: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/user_usage_stats/user_list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Emby-Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Emby-Authorization"] = localVarApiKeyValue;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [days] 
         * @param {string} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMovieReport: async (days?: number, endDate?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/user_usage_stats/MoviesReport`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Emby-Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Emby-Authorization"] = localVarApiKeyValue;
            }

            if (days !== undefined) {
                localVarQueryParameter['days'] = days;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString() :
                    endDate;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [days] 
         * @param {string} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTvShowsReport: async (days?: number, endDate?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/user_usage_stats/GetTvShowsReport`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Emby-Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Emby-Authorization"] = localVarApiKeyValue;
            }

            if (days !== undefined) {
                localVarQueryParameter['days'] = days;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString() :
                    endDate;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTypeFilterList: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/user_usage_stats/type_filter_list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Emby-Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Emby-Authorization"] = localVarApiKeyValue;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [days] 
         * @param {string} [endDate] 
         * @param {string} [filter] 
         * @param {string} [dataType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsageStats: async (days?: number, endDate?: string, filter?: string, dataType?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/user_usage_stats/PlayActivity`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Emby-Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Emby-Authorization"] = localVarApiKeyValue;
            }

            if (days !== undefined) {
                localVarQueryParameter['days'] = days;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString() :
                    endDate;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (dataType !== undefined) {
                localVarQueryParameter['dataType'] = dataType;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [days] 
         * @param {string} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserReport: async (days?: number, endDate?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/user_usage_stats/user_activity`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Emby-Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Emby-Authorization"] = localVarApiKeyValue;
            }

            if (days !== undefined) {
                localVarQueryParameter['days'] = days;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString() :
                    endDate;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userId 
         * @param {string} date 
         * @param {string} filter 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserReportData: async (userId: string, date: string, filter: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling getUserReportData.');
            }
            // verify required parameter 'date' is not null or undefined
            if (date === null || date === undefined) {
                throw new RequiredError('date','Required parameter date was null or undefined when calling getUserReportData.');
            }
            // verify required parameter 'filter' is not null or undefined
            if (filter === null || filter === undefined) {
                throw new RequiredError('filter','Required parameter filter was null or undefined when calling getUserReportData.');
            }
            const localVarPath = `/user_usage_stats/{userId}/{date}/GetItems`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"date"}}`, encodeURIComponent(String(date)))
                .replace(`{${"filter"}}`, encodeURIComponent(String(filter)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Emby-Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Emby-Authorization"] = localVarApiKeyValue;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [backupFilePath] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loadBackup: async (backupFilePath?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/user_usage_stats/load_backup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Emby-Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Emby-Authorization"] = localVarApiKeyValue;
            }

            if (backupFilePath !== undefined) {
                localVarQueryParameter['backupFilePath'] = backupFilePath;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} action 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        performUserAction: async (action: string, id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'action' is not null or undefined
            if (action === null || action === undefined) {
                throw new RequiredError('action','Required parameter action was null or undefined when calling performUserAction.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling performUserAction.');
            }
            const localVarPath = `/user_usage_stats/user_mange/{action}/{id}`
                .replace(`{${"action"}}`, encodeURIComponent(String(action)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Emby-Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Emby-Authorization"] = localVarApiKeyValue;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveBackup: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/user_usage_stats/save_backup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Emby-Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Emby-Authorization"] = localVarApiKeyValue;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PlaybackReportingActivityApi - functional programming interface
 * @export
 */
export const PlaybackReportingActivityApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [customQueryString] 
         * @param {boolean} [replaceUserId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customQuery(customQueryString?: string, replaceUserId?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: any; }>> {
            const localVarAxiosArgs = await PlaybackReportingActivityApiAxiosParamCreator(configuration).customQuery(customQueryString, replaceUserId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} breakdownType 
         * @param {number} [days] 
         * @param {string} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBreakdownReport(breakdownType: string, days?: number, endDate?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await PlaybackReportingActivityApiAxiosParamCreator(configuration).getBreakdownReport(breakdownType, days, endDate, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [days] 
         * @param {string} [endDate] 
         * @param {string} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDurationHistogramReport(days?: number, endDate?: string, filter?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await PlaybackReportingActivityApiAxiosParamCreator(configuration).getDurationHistogramReport(days, endDate, filter, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [days] 
         * @param {string} [endDate] 
         * @param {string} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHourlyReport(days?: number, endDate?: string, filter?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await PlaybackReportingActivityApiAxiosParamCreator(configuration).getHourlyReport(days, endDate, filter, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getJellyfinUsers(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await PlaybackReportingActivityApiAxiosParamCreator(configuration).getJellyfinUsers(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [days] 
         * @param {string} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMovieReport(days?: number, endDate?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await PlaybackReportingActivityApiAxiosParamCreator(configuration).getMovieReport(days, endDate, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [days] 
         * @param {string} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTvShowsReport(days?: number, endDate?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await PlaybackReportingActivityApiAxiosParamCreator(configuration).getTvShowsReport(days, endDate, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTypeFilterList(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await PlaybackReportingActivityApiAxiosParamCreator(configuration).getTypeFilterList(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [days] 
         * @param {string} [endDate] 
         * @param {string} [filter] 
         * @param {string} [dataType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsageStats(days?: number, endDate?: string, filter?: string, dataType?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await PlaybackReportingActivityApiAxiosParamCreator(configuration).getUsageStats(days, endDate, filter, dataType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [days] 
         * @param {string} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserReport(days?: number, endDate?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await PlaybackReportingActivityApiAxiosParamCreator(configuration).getUserReport(days, endDate, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} userId 
         * @param {string} date 
         * @param {string} filter 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserReportData(userId: string, date: string, filter: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await PlaybackReportingActivityApiAxiosParamCreator(configuration).getUserReportData(userId, date, filter, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [backupFilePath] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loadBackup(backupFilePath?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await PlaybackReportingActivityApiAxiosParamCreator(configuration).loadBackup(backupFilePath, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} action 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async performUserAction(action: string, id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await PlaybackReportingActivityApiAxiosParamCreator(configuration).performUserAction(action, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveBackup(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await PlaybackReportingActivityApiAxiosParamCreator(configuration).saveBackup(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * PlaybackReportingActivityApi - factory interface
 * @export
 */
export const PlaybackReportingActivityApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {string} [customQueryString] 
         * @param {boolean} [replaceUserId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customQuery(customQueryString?: string, replaceUserId?: boolean, options?: any): AxiosPromise<{ [key: string]: any; }> {
            return PlaybackReportingActivityApiFp(configuration).customQuery(customQueryString, replaceUserId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} breakdownType 
         * @param {number} [days] 
         * @param {string} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBreakdownReport(breakdownType: string, days?: number, endDate?: string, options?: any): AxiosPromise<void> {
            return PlaybackReportingActivityApiFp(configuration).getBreakdownReport(breakdownType, days, endDate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [days] 
         * @param {string} [endDate] 
         * @param {string} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDurationHistogramReport(days?: number, endDate?: string, filter?: string, options?: any): AxiosPromise<void> {
            return PlaybackReportingActivityApiFp(configuration).getDurationHistogramReport(days, endDate, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [days] 
         * @param {string} [endDate] 
         * @param {string} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHourlyReport(days?: number, endDate?: string, filter?: string, options?: any): AxiosPromise<void> {
            return PlaybackReportingActivityApiFp(configuration).getHourlyReport(days, endDate, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJellyfinUsers(options?: any): AxiosPromise<void> {
            return PlaybackReportingActivityApiFp(configuration).getJellyfinUsers(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [days] 
         * @param {string} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMovieReport(days?: number, endDate?: string, options?: any): AxiosPromise<void> {
            return PlaybackReportingActivityApiFp(configuration).getMovieReport(days, endDate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [days] 
         * @param {string} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTvShowsReport(days?: number, endDate?: string, options?: any): AxiosPromise<void> {
            return PlaybackReportingActivityApiFp(configuration).getTvShowsReport(days, endDate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTypeFilterList(options?: any): AxiosPromise<void> {
            return PlaybackReportingActivityApiFp(configuration).getTypeFilterList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [days] 
         * @param {string} [endDate] 
         * @param {string} [filter] 
         * @param {string} [dataType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsageStats(days?: number, endDate?: string, filter?: string, dataType?: string, options?: any): AxiosPromise<void> {
            return PlaybackReportingActivityApiFp(configuration).getUsageStats(days, endDate, filter, dataType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [days] 
         * @param {string} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserReport(days?: number, endDate?: string, options?: any): AxiosPromise<void> {
            return PlaybackReportingActivityApiFp(configuration).getUserReport(days, endDate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} userId 
         * @param {string} date 
         * @param {string} filter 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserReportData(userId: string, date: string, filter: string, options?: any): AxiosPromise<void> {
            return PlaybackReportingActivityApiFp(configuration).getUserReportData(userId, date, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [backupFilePath] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loadBackup(backupFilePath?: string, options?: any): AxiosPromise<Array<string>> {
            return PlaybackReportingActivityApiFp(configuration).loadBackup(backupFilePath, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} action 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        performUserAction(action: string, id: string, options?: any): AxiosPromise<boolean> {
            return PlaybackReportingActivityApiFp(configuration).performUserAction(action, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveBackup(options?: any): AxiosPromise<Array<string>> {
            return PlaybackReportingActivityApiFp(configuration).saveBackup(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for customQuery operation in PlaybackReportingActivityApi.
 * @export
 * @interface PlaybackReportingActivityApiCustomQueryRequest
 */
export interface PlaybackReportingActivityApiCustomQueryRequest {
    /**
     * 
     * @type {string}
     * @memberof PlaybackReportingActivityApiCustomQuery
     */
    readonly customQueryString?: string

    /**
     * 
     * @type {boolean}
     * @memberof PlaybackReportingActivityApiCustomQuery
     */
    readonly replaceUserId?: boolean
}

/**
 * Request parameters for getBreakdownReport operation in PlaybackReportingActivityApi.
 * @export
 * @interface PlaybackReportingActivityApiGetBreakdownReportRequest
 */
export interface PlaybackReportingActivityApiGetBreakdownReportRequest {
    /**
     * 
     * @type {string}
     * @memberof PlaybackReportingActivityApiGetBreakdownReport
     */
    readonly breakdownType: string

    /**
     * 
     * @type {number}
     * @memberof PlaybackReportingActivityApiGetBreakdownReport
     */
    readonly days?: number

    /**
     * 
     * @type {string}
     * @memberof PlaybackReportingActivityApiGetBreakdownReport
     */
    readonly endDate?: string
}

/**
 * Request parameters for getDurationHistogramReport operation in PlaybackReportingActivityApi.
 * @export
 * @interface PlaybackReportingActivityApiGetDurationHistogramReportRequest
 */
export interface PlaybackReportingActivityApiGetDurationHistogramReportRequest {
    /**
     * 
     * @type {number}
     * @memberof PlaybackReportingActivityApiGetDurationHistogramReport
     */
    readonly days?: number

    /**
     * 
     * @type {string}
     * @memberof PlaybackReportingActivityApiGetDurationHistogramReport
     */
    readonly endDate?: string

    /**
     * 
     * @type {string}
     * @memberof PlaybackReportingActivityApiGetDurationHistogramReport
     */
    readonly filter?: string
}

/**
 * Request parameters for getHourlyReport operation in PlaybackReportingActivityApi.
 * @export
 * @interface PlaybackReportingActivityApiGetHourlyReportRequest
 */
export interface PlaybackReportingActivityApiGetHourlyReportRequest {
    /**
     * 
     * @type {number}
     * @memberof PlaybackReportingActivityApiGetHourlyReport
     */
    readonly days?: number

    /**
     * 
     * @type {string}
     * @memberof PlaybackReportingActivityApiGetHourlyReport
     */
    readonly endDate?: string

    /**
     * 
     * @type {string}
     * @memberof PlaybackReportingActivityApiGetHourlyReport
     */
    readonly filter?: string
}

/**
 * Request parameters for getMovieReport operation in PlaybackReportingActivityApi.
 * @export
 * @interface PlaybackReportingActivityApiGetMovieReportRequest
 */
export interface PlaybackReportingActivityApiGetMovieReportRequest {
    /**
     * 
     * @type {number}
     * @memberof PlaybackReportingActivityApiGetMovieReport
     */
    readonly days?: number

    /**
     * 
     * @type {string}
     * @memberof PlaybackReportingActivityApiGetMovieReport
     */
    readonly endDate?: string
}

/**
 * Request parameters for getTvShowsReport operation in PlaybackReportingActivityApi.
 * @export
 * @interface PlaybackReportingActivityApiGetTvShowsReportRequest
 */
export interface PlaybackReportingActivityApiGetTvShowsReportRequest {
    /**
     * 
     * @type {number}
     * @memberof PlaybackReportingActivityApiGetTvShowsReport
     */
    readonly days?: number

    /**
     * 
     * @type {string}
     * @memberof PlaybackReportingActivityApiGetTvShowsReport
     */
    readonly endDate?: string
}

/**
 * Request parameters for getUsageStats operation in PlaybackReportingActivityApi.
 * @export
 * @interface PlaybackReportingActivityApiGetUsageStatsRequest
 */
export interface PlaybackReportingActivityApiGetUsageStatsRequest {
    /**
     * 
     * @type {number}
     * @memberof PlaybackReportingActivityApiGetUsageStats
     */
    readonly days?: number

    /**
     * 
     * @type {string}
     * @memberof PlaybackReportingActivityApiGetUsageStats
     */
    readonly endDate?: string

    /**
     * 
     * @type {string}
     * @memberof PlaybackReportingActivityApiGetUsageStats
     */
    readonly filter?: string

    /**
     * 
     * @type {string}
     * @memberof PlaybackReportingActivityApiGetUsageStats
     */
    readonly dataType?: string
}

/**
 * Request parameters for getUserReport operation in PlaybackReportingActivityApi.
 * @export
 * @interface PlaybackReportingActivityApiGetUserReportRequest
 */
export interface PlaybackReportingActivityApiGetUserReportRequest {
    /**
     * 
     * @type {number}
     * @memberof PlaybackReportingActivityApiGetUserReport
     */
    readonly days?: number

    /**
     * 
     * @type {string}
     * @memberof PlaybackReportingActivityApiGetUserReport
     */
    readonly endDate?: string
}

/**
 * Request parameters for getUserReportData operation in PlaybackReportingActivityApi.
 * @export
 * @interface PlaybackReportingActivityApiGetUserReportDataRequest
 */
export interface PlaybackReportingActivityApiGetUserReportDataRequest {
    /**
     * 
     * @type {string}
     * @memberof PlaybackReportingActivityApiGetUserReportData
     */
    readonly userId: string

    /**
     * 
     * @type {string}
     * @memberof PlaybackReportingActivityApiGetUserReportData
     */
    readonly date: string

    /**
     * 
     * @type {string}
     * @memberof PlaybackReportingActivityApiGetUserReportData
     */
    readonly filter: string
}

/**
 * Request parameters for loadBackup operation in PlaybackReportingActivityApi.
 * @export
 * @interface PlaybackReportingActivityApiLoadBackupRequest
 */
export interface PlaybackReportingActivityApiLoadBackupRequest {
    /**
     * 
     * @type {string}
     * @memberof PlaybackReportingActivityApiLoadBackup
     */
    readonly backupFilePath?: string
}

/**
 * Request parameters for performUserAction operation in PlaybackReportingActivityApi.
 * @export
 * @interface PlaybackReportingActivityApiPerformUserActionRequest
 */
export interface PlaybackReportingActivityApiPerformUserActionRequest {
    /**
     * 
     * @type {string}
     * @memberof PlaybackReportingActivityApiPerformUserAction
     */
    readonly action: string

    /**
     * 
     * @type {string}
     * @memberof PlaybackReportingActivityApiPerformUserAction
     */
    readonly id: string
}

/**
 * PlaybackReportingActivityApi - object-oriented interface
 * @export
 * @class PlaybackReportingActivityApi
 * @extends {BaseAPI}
 */
export class PlaybackReportingActivityApi extends BaseAPI {
    /**
     * 
     * @param {PlaybackReportingActivityApiCustomQueryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaybackReportingActivityApi
     */
    public customQuery(requestParameters: PlaybackReportingActivityApiCustomQueryRequest = {}, options?: any) {
        return PlaybackReportingActivityApiFp(this.configuration).customQuery(requestParameters.customQueryString, requestParameters.replaceUserId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PlaybackReportingActivityApiGetBreakdownReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaybackReportingActivityApi
     */
    public getBreakdownReport(requestParameters: PlaybackReportingActivityApiGetBreakdownReportRequest, options?: any) {
        return PlaybackReportingActivityApiFp(this.configuration).getBreakdownReport(requestParameters.breakdownType, requestParameters.days, requestParameters.endDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PlaybackReportingActivityApiGetDurationHistogramReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaybackReportingActivityApi
     */
    public getDurationHistogramReport(requestParameters: PlaybackReportingActivityApiGetDurationHistogramReportRequest = {}, options?: any) {
        return PlaybackReportingActivityApiFp(this.configuration).getDurationHistogramReport(requestParameters.days, requestParameters.endDate, requestParameters.filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PlaybackReportingActivityApiGetHourlyReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaybackReportingActivityApi
     */
    public getHourlyReport(requestParameters: PlaybackReportingActivityApiGetHourlyReportRequest = {}, options?: any) {
        return PlaybackReportingActivityApiFp(this.configuration).getHourlyReport(requestParameters.days, requestParameters.endDate, requestParameters.filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaybackReportingActivityApi
     */
    public getJellyfinUsers(options?: any) {
        return PlaybackReportingActivityApiFp(this.configuration).getJellyfinUsers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PlaybackReportingActivityApiGetMovieReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaybackReportingActivityApi
     */
    public getMovieReport(requestParameters: PlaybackReportingActivityApiGetMovieReportRequest = {}, options?: any) {
        return PlaybackReportingActivityApiFp(this.configuration).getMovieReport(requestParameters.days, requestParameters.endDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PlaybackReportingActivityApiGetTvShowsReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaybackReportingActivityApi
     */
    public getTvShowsReport(requestParameters: PlaybackReportingActivityApiGetTvShowsReportRequest = {}, options?: any) {
        return PlaybackReportingActivityApiFp(this.configuration).getTvShowsReport(requestParameters.days, requestParameters.endDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaybackReportingActivityApi
     */
    public getTypeFilterList(options?: any) {
        return PlaybackReportingActivityApiFp(this.configuration).getTypeFilterList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PlaybackReportingActivityApiGetUsageStatsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaybackReportingActivityApi
     */
    public getUsageStats(requestParameters: PlaybackReportingActivityApiGetUsageStatsRequest = {}, options?: any) {
        return PlaybackReportingActivityApiFp(this.configuration).getUsageStats(requestParameters.days, requestParameters.endDate, requestParameters.filter, requestParameters.dataType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PlaybackReportingActivityApiGetUserReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaybackReportingActivityApi
     */
    public getUserReport(requestParameters: PlaybackReportingActivityApiGetUserReportRequest = {}, options?: any) {
        return PlaybackReportingActivityApiFp(this.configuration).getUserReport(requestParameters.days, requestParameters.endDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PlaybackReportingActivityApiGetUserReportDataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaybackReportingActivityApi
     */
    public getUserReportData(requestParameters: PlaybackReportingActivityApiGetUserReportDataRequest, options?: any) {
        return PlaybackReportingActivityApiFp(this.configuration).getUserReportData(requestParameters.userId, requestParameters.date, requestParameters.filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PlaybackReportingActivityApiLoadBackupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaybackReportingActivityApi
     */
    public loadBackup(requestParameters: PlaybackReportingActivityApiLoadBackupRequest = {}, options?: any) {
        return PlaybackReportingActivityApiFp(this.configuration).loadBackup(requestParameters.backupFilePath, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PlaybackReportingActivityApiPerformUserActionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaybackReportingActivityApi
     */
    public performUserAction(requestParameters: PlaybackReportingActivityApiPerformUserActionRequest, options?: any) {
        return PlaybackReportingActivityApiFp(this.configuration).performUserAction(requestParameters.action, requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaybackReportingActivityApi
     */
    public saveBackup(options?: any) {
        return PlaybackReportingActivityApiFp(this.configuration).saveBackup(options).then((request) => request(this.axios, this.basePath));
    }
}
